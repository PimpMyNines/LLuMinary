name: Docker Tests

# This workflow uses Docker to create a consistent testing environment
# It runs all tests in a containerized environment to ensure
# consistent results across different CI runners and developer machines

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/docker-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/docker-tests.yml'
  workflow_dispatch:  # Allows manual triggering

jobs:
  docker-test:
    name: Docker Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        tags: lluminary-test:latest
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Run unit tests in Docker with parallel execution
      run: docker run --rm lluminary-test tests/unit -v -n auto

    - name: Run integration tests in Docker with parallel execution
      run: docker run --rm lluminary-test tests/integration -v -n auto

    # Generate and extract coverage report with parallel execution
    - name: Run tests with coverage
      run: |
        mkdir -p coverage
        docker run --rm -v ${{ github.workspace }}/coverage:/app/coverage lluminary-test \
          tests/ --cov=src/lluminary --cov-report=xml:/app/coverage/coverage.xml -n auto

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    # Add PR comment with test results
    - name: Create test summary
      if: github.event_name == 'pull_request'
      run: |
        echo "Docker test results summary:" > test_summary.md
        echo "- ✅ Unit tests completed successfully" >> test_summary.md
        echo "- ✅ Integration tests completed successfully" >> test_summary.md
        echo "- ✅ Coverage report generated" >> test_summary.md

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test_summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Docker Test Results\n\n${summary}\n\nTests run in a containerized environment for consistency.`
          });

    # Move cache to avoid growing cache size
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

